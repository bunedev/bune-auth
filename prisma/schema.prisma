// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch"]

}


generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output                                = "../src/@generated"
  noAtomicOperations                    = false
  combineScalarFilters                  = false
  reExport                              = None
  emitSingle                            = false
  emitCompiled                          = false
  purgeOutput                           = false
  requireSingleFieldsInWhereUniqueInput = false
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  fields_Scalars_from                   = "graphql-scalars"
  fields_Scalars_input                  = true
  useInputType_WhereInput_ALL           = "WhereInput"
  decorate_1_type                       = "Create@(One|Many)UserArgs"
  decorate_1_field                      = data
  decorate_1_name                       = ValidateNested
  decorate_1_from                       = "class-validator"
  decorate_1_arguments                  = "[]"
  decorate_2_type                       = "Create@(One|Many)UserArgs"
  decorate_2_field                      = data
  decorate_2_from                       = "class-transformer"
  decorate_2_arguments                  = "['() => {propertyType.0}']"
  decorate_2_name                       = Type
  decorate_2_namedImport                = true
  decorate_3_type                       = "ProfileUncheckedCreateNestedOneWithoutUserInput"
  decorate_3_field                      = "!(create)"
  decorate_3_name                       = "HideField"
  decorate_3_from                       = "@nestjs/graphql"
  decorate_3_arguments                  = "[]"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  /// @FieldType('Scalars.GraphQLEmailAddress')
  email     String    @unique
  
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(50)
  username  String    @unique @default(cuid())
  /// @HideField()
  password String 
  profilePicture   String?
  dateOfBirth     DateTime?
  phone     String? 
  status    UserStatus  @default(INACTIVE)
  twoFactorEnabled Boolean?
  emailVerified Boolean?
  lastLogin DateTime?
  loginMethod LoginMethod @default(LOCAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  roleId    String?
  role      Role?    @relation(fields: [roleId], references: [id])

  @@unique([email, username])

}

model Role {
  id String @id @default(cuid())
  key String  @unique
  name String?
  description String?
  status RoleStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  permissions Permission[]
  users     User[]
}

model Permission {
  id          String       @id @default(cuid())
  action      String? 
  subject    String? 
  inverted    Boolean? @default(false)
  conditions Json?    
  reason     String? @db.Text()
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      PermissionStatus? @default(ACTIVE)
  roles       Role[] 
}


enum LoginMethod {
  LOCAL // email and password
  GOOGLE 
  FACEBOOK
  GITHUB
  WEIBO
  TWITTER
  LINE
  MICROSOFT
  LINKEDIN
  AMAZON
  WECHAT
}

enum UserStatus {
  ACTIVE  // User active
  INACTIVE  // The account exists but is not currently in use. This could be for users who haven't completed certain steps like email verification
  SUSPENDED // The account has been temporarily disabled due to reasons such as violating terms of service or other policies
  LOCKED   // The account is locked, possibly due to multiple failed login attempts or security concerns
  CLOSED // The account has been permanently closed, either by the user or by the system (in case of long-term inactivity or compliance reasons)
  ARCHIVED // The account is no longer active but has been archived for record-keeping purposes.
}

enum RoleStatus {
  ACTIVE  // Role active
  INACTIVE // The role exists but is not currently available for assignment. This can be used for roles that are temporarily not in use
  DEPRECATED // Indicates that the role is outdated or no longer relevant, but still exists for historical or legacy reasons.
  LOCKED // The role is locked from being assigned to any new users, possibly due to security or organizational changes.
  ARCHIVED //The role is no longer active but is kept for record-keeping or audit purposes.
}

enum PermissionStatus {
  ACTIVE // Indicates that the permission is currently active and can be assigned to roles.
  INACTIVE // The permission exists but is not currently available for assignment. Useful for temporarily disabling a permission without removing it
  DEPRECATED // Signifies that the permission is outdated or no longer relevant for new assignments, but still exists for legacy support.
  ARCHIVED //The permission is no longer in active use but is retained for record-keeping or audit purposes.
}